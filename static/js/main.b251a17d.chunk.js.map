{"version":3,"sources":["components/contacts.js","App.js","serviceWorker.js","index.js"],"names":["Contacts","contacts","useState","map","contact","class","id","nombre","descripcion","App","props","state","user","console","log","postId","e","this","fetch","method","body","JSON","stringify","headers","then","response","json","setState","window","location","reload","target","value","test","res","data","catch","type","maxLength","size","name","onChange","handleChange","bind","handleNameChange","handleDescripcionChange","onClick","handleClick","React","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAsBeA,EAlBE,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EACLC,mBAAS,IADJ,6BAE7B,OACI,gCACE,iCAAQ,2DACPD,EAASE,KAAI,SAACC,GAAD,OACZ,qBAAKC,MAAM,OAAX,SACE,sBAAKA,MAAM,YAAX,UACE,oBAAIA,MAAM,aAAV,SAAwBD,EAAQE,KAChC,oBAAID,MAAM,gCAAV,SAA2CD,EAAQG,SACnD,mBAAGF,MAAM,YAAT,SAAsBD,EAAQI,0BC2F/BC,E,kDA5Fd,WAAYC,GAAQ,IAAD,8BAElB,cAAMA,IATNC,MAAQ,CAENL,GAAI,GACJC,OAAQ,GACRC,YAAa,IAMb,EAAKG,MAAQ,CAACC,KAAM,GAAGX,SAAU,IAHjB,E,4DAUhBY,QAAQC,IAAK,a,kCAKDC,EAAQC,GAAI,IAAD,OACrBH,QAAQC,IAAIG,KAAKN,MAAML,IACvBO,QAAQC,IAAIG,KAAKN,MAAMJ,QACvBM,QAAQC,IAAIG,KAAKN,MAAMH,aACvBU,MAAM,wDAAyD,CAC7DC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBhB,GAAIW,KAAKN,MAAML,GACfC,OAAQU,KAAKN,MAAMJ,OACnBC,YAAaS,KAAKN,MAAMH,cAE1Be,QAAS,CACP,eAAgB,qCAEjBC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UACfF,MAAK,SAAAE,GACN,EAAKC,SAAS,CACZf,KAAKc,OAGTE,OAAOC,SAASC,QAAO,K,mCAEdd,IAEY,KAAnBA,EAAEe,OAAOC,OADF,aACqBC,KAAKjB,EAAEe,OAAOC,SAC9Cf,KAAKU,SAAS,CAAErB,GAAKU,EAAEe,OAAOC,U,uCAIhBhB,GAChBC,KAAKU,SAAS,CAAEpB,OAAQS,EAAEe,OAAOC,U,8CAGXhB,GACtBC,KAAKU,SAAS,CAACnB,YAAaQ,EAAEe,OAAOC,U,0CAGnB,IAAD,OAGbd,MAAM,0DACLM,MAAK,SAAAU,GAAG,OAAIA,EAAIR,UAChBF,MAAK,SAACW,GACLtB,QAAQC,IAAIqB,GACZ,EAAKR,SAAS,CAAE1B,SAAUkC,OAE3BC,MAAMvB,QAAQC,O,+BAIrB,OACC,gCACM,uCAAS,wDADf,MAEA,uBAAOuB,KAAK,OAAOC,UAAU,IAAIC,KAAK,IACxCC,KAAK,KAAOC,SAAWxB,KAAKyB,aAAaC,KAAK1B,MAASe,MAAQf,KAAKN,MAAML,KAHxE,SAIG,uBAAO+B,KAAK,OAAOL,MAAQf,KAAKN,MAAMJ,OAC3CkC,SAAWxB,KAAK2B,iBAAiBD,KAAK1B,QALpC,eAMS,uBAAOoB,KAAK,OAAOL,MAAQf,KAAKN,MAAMH,YAClDiC,SAAWxB,KAAK4B,wBAAwBF,KAAK1B,QAEzC,4BAAG,oFACH,sCAASA,KAAKN,MAAML,MACpB,+CAAkBW,KAAKN,MAAMJ,UAC7B,+CAAkBU,KAAKN,MAAMH,eAEzB,uBAAO6B,KAAK,SACpBS,QAAS7B,KAAK8B,YAAYJ,KAAK1B,KAAMA,KAAKN,MAAML,IAChD0B,MAAM,mBAGE,cAAC,EAAD,CAAU/B,SAAUgB,KAAKN,MAAMV,kB,GA/FrB+C,IAAMC,WCQJC,QACa,cAA7BtB,OAAOC,SAASsB,UAEe,UAA7BvB,OAAOC,SAASsB,UAEhBvB,OAAOC,SAASsB,SAASC,MACvB,2DCZRC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD2HzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,MAAK,SAAAoC,GACjCA,EAAaC,kB","file":"static/js/main.b251a17d.chunk.js","sourcesContent":["  \r\n\r\nimport React, { Text, TextInput, View,useState } from 'react';\r\n\r\nconst Contacts = ({contacts}) => {\r\n    const [text, setText] = useState('');\r\n    return (\r\n        <div>\r\n          <center><h1>Lista de tareas creadas</h1></center>\r\n          {contacts.map((contact) => (\r\n            <div class=\"card\">\r\n              <div class=\"card-body\">\r\n                <h5 class=\"card-title\">{contact.id}</h5>\r\n                <h6 class=\"card-subtitle mb-2 text-muted\">{contact.nombre}</h6>\r\n                <p class=\"card-text\">{contact.descripcion}</p>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Contacts","import React from 'react';\nimport { View, Text,Alert, Button,TouchableOpacity, TextInput, StyleSheet } from 'react'\nimport Contacts from './components/contacts'\n\nclass App extends React.Component {\n \n  state = {\n    \n    id: '',\n    nombre: '',\n    descripcion: ''\n\n }\n\tconstructor(props) {\n\n\t\tsuper(props);\n    this.state = {user: [],contacts: []};\n\n  \n    \n  }\n  \n  onPressButton() {\n    console.log( \"this.id\" || this.id);\n\n  \n    }\n\n    handleClick(postId, e) {\n      console.log(this.state.id);\n      console.log(this.state.nombre);\n      console.log(this.state.descripcion);\n      fetch('http://localhost:8080/Tareas-1.1/registro/tareas/save', {\n        method: 'POST',\n        body: JSON.stringify({\n          id: this.state.id,\n          nombre: this.state.nombre,\n          descripcion: this.state.descripcion\n        }),\n        headers: {\n          \"Content-type\": \"application/json; charset=UTF-8\"\n        }\n      }).then(response => {\n          return response.json()\n        }).then(json => {\n          this.setState({\n            user:json\n          });\n        });\n        window.location.reload(false);\n    }\n    handleChange(e) {\n      const re = /^[0-9\\b]+$/;\n      if (e.target.value === '' || re.test(e.target.value)) {\n      this.setState({ id:  e.target.value});\n      }\n    }\n\n\t  handleNameChange(e) {\n    this.setState({ nombre: e.target.value});\n  }\n\n  handleDescripcionChange(e) {\n    this.setState({descripcion: e.target.value});\n  }\n\n\tcomponentDidMount() {\n\t\n\n        fetch('http://localhost:8080/Tareas-1.1/consulta/allProductos')\n        .then(res => res.json())\n        .then((data) => {\n          console.log(data);\n          this.setState({ contacts: data })\n        })\n        .catch(console.log)\n      \n\t}\n\trender() {                            \n\t\treturn (\n\t\t\t<div>\n         <center> <h1> creacion de tareas</h1></center>\nid <input type=\"text\" maxLength=\"6\" size=\"6\"\n name=\"id\"   onChange={ this.handleChange.bind(this) }  value={ this.state.id }  />\nTarea <input type=\"text\" value={ this.state.nombre }   \n onChange={ this.handleNameChange.bind(this) } />\ndescripcion <input type=\"text\" value={ this.state.descripcion } \nonChange={ this.handleDescripcionChange.bind(this) }/>\n\n\t\t\t\t<p><b>New Resource created in the server as shown below</b></p>\n\t\t\t\t<p>Id : {this.state.id}</p>\n\t\t\t\t<p>nombre Tarea: {this.state.nombre}</p>\n\t\t\t\t<p>descripcion : {this.state.descripcion}</p>\n\n        <input type=\"button\"\nonClick={this.handleClick.bind(this, this.state.id)}\nvalue=\"ingresar tarea\"\n\n/>\n        <Contacts contacts={this.state.contacts }/>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }\r\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}